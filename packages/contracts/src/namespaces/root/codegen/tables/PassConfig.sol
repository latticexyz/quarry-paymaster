// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct PassConfigData {
  uint256 claimAmount;
  uint256 claimInterval;
  uint256 validityPeriod;
  address grantor;
}

library PassConfig {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "PassConfig", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000050617373436f6e666967000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0074040020202014000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, address)
  Schema constant _valueSchema = Schema.wrap(0x007404001f1f1f61000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "passId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "claimAmount";
    fieldNames[1] = "claimInterval";
    fieldNames[2] = "validityPeriod";
    fieldNames[3] = "grantor";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get claimAmount.
   */
  function getClaimAmount(bytes32 passId) internal view returns (uint256 claimAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get claimAmount.
   */
  function _getClaimAmount(bytes32 passId) internal view returns (uint256 claimAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set claimAmount.
   */
  function setClaimAmount(bytes32 passId, uint256 claimAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((claimAmount)), _fieldLayout);
  }

  /**
   * @notice Set claimAmount.
   */
  function _setClaimAmount(bytes32 passId, uint256 claimAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((claimAmount)), _fieldLayout);
  }

  /**
   * @notice Get claimInterval.
   */
  function getClaimInterval(bytes32 passId) internal view returns (uint256 claimInterval) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get claimInterval.
   */
  function _getClaimInterval(bytes32 passId) internal view returns (uint256 claimInterval) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set claimInterval.
   */
  function setClaimInterval(bytes32 passId, uint256 claimInterval) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((claimInterval)), _fieldLayout);
  }

  /**
   * @notice Set claimInterval.
   */
  function _setClaimInterval(bytes32 passId, uint256 claimInterval) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((claimInterval)), _fieldLayout);
  }

  /**
   * @notice Get validityPeriod.
   */
  function getValidityPeriod(bytes32 passId) internal view returns (uint256 validityPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get validityPeriod.
   */
  function _getValidityPeriod(bytes32 passId) internal view returns (uint256 validityPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set validityPeriod.
   */
  function setValidityPeriod(bytes32 passId, uint256 validityPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((validityPeriod)), _fieldLayout);
  }

  /**
   * @notice Set validityPeriod.
   */
  function _setValidityPeriod(bytes32 passId, uint256 validityPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((validityPeriod)), _fieldLayout);
  }

  /**
   * @notice Get grantor.
   */
  function getGrantor(bytes32 passId) internal view returns (address grantor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get grantor.
   */
  function _getGrantor(bytes32 passId) internal view returns (address grantor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set grantor.
   */
  function setGrantor(bytes32 passId, address grantor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((grantor)), _fieldLayout);
  }

  /**
   * @notice Set grantor.
   */
  function _setGrantor(bytes32 passId, address grantor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((grantor)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 passId) internal view returns (PassConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 passId) internal view returns (PassConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 passId,
    uint256 claimAmount,
    uint256 claimInterval,
    uint256 validityPeriod,
    address grantor
  ) internal {
    bytes memory _staticData = encodeStatic(claimAmount, claimInterval, validityPeriod, grantor);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 passId,
    uint256 claimAmount,
    uint256 claimInterval,
    uint256 validityPeriod,
    address grantor
  ) internal {
    bytes memory _staticData = encodeStatic(claimAmount, claimInterval, validityPeriod, grantor);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 passId, PassConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.claimAmount,
      _table.claimInterval,
      _table.validityPeriod,
      _table.grantor
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 passId, PassConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.claimAmount,
      _table.claimInterval,
      _table.validityPeriod,
      _table.grantor
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 claimAmount, uint256 claimInterval, uint256 validityPeriod, address grantor) {
    claimAmount = (uint256(Bytes.getBytes32(_blob, 0)));

    claimInterval = (uint256(Bytes.getBytes32(_blob, 32)));

    validityPeriod = (uint256(Bytes.getBytes32(_blob, 64)));

    grantor = (address(Bytes.getBytes20(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (PassConfigData memory _table) {
    (_table.claimAmount, _table.claimInterval, _table.validityPeriod, _table.grantor) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 passId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 passId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 claimAmount,
    uint256 claimInterval,
    uint256 validityPeriod,
    address grantor
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(claimAmount, claimInterval, validityPeriod, grantor);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 claimAmount,
    uint256 claimInterval,
    uint256 validityPeriod,
    address grantor
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(claimAmount, claimInterval, validityPeriod, grantor);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 passId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = passId;

    return _keyTuple;
  }
}
